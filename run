#!/bin/bash
# Starts a Neoclassical Habitat server and Habitat protocol bridge.

set -o pipefail

trap 'kill %1; kill %2' SIGINT

function retry() {
  local n=0
  local try=$1
  local cmd="${@: 2}"
  [[ $# -le 1 ]] && {
    echo "Usage $0 <retry_number> <command>";
  }

  until [[ $n -ge $try ]]
  do
    $cmd && break || {
      echo "Command Fail.."
      ((n++))
      echo "retry $n ::"
      sleep 1;
    }
  done
}

# GIT_BASE_DIR=$(git rev-parse --show-toplevel)
GIT_BASE_DIR="/neohabitat"
echo "GIT_BASE_DIR == $GIT_BASE_DIR"
VERSION="0.1.0-SNAPSHOT"

# Sets default config values if there are no environment-level overrides.
DEBUG_PORT="${NEOHABITAT_DEBUG_PORT:=1985}"
MONGO_HOST="${NEOHABITAT_MONGO_HOST:=neohabitatmongo:27017}"
BRIDGE_HOST="${NEOHABITAT_BRIDGE_HOST:=0.0.0.0}"
BRIDGE_PORT="${NEOHABITAT_BRIDGE_PORT:=1337}"
BRIDGE_ELKO_HOST="${NEOHABITAT_BRIDGE_ELKO_HOST:=neohabitat:9000}"
DEFAULT_CONTEXT="${NEOHABITAT_DEFAULT_CONTEXT:=context-Downtown_5f}"
SCHEMA_DIR="${NEOHABITAT_SCHEMA_DIR:=db}"
SERVER_HOST="${NEOHABITAT_SERVER_HOST:=0.0.0.0}"
SERVER_NAME="${NEOHABITAT_SERVER_NAME:=neohabitat}"
SERVER_BIND="${NEOHABITAT_SERVER_HOST:=0.0.0.0}"
DEBUGGER_PORT="${NEOHABITAT_DEBUGGER_PORT:=1898}"
SHUTDOWN_PASSWORD="${NEOHABITAT_SHUTDOWN_PASSWORD:=figleaf}"
SHOULD_BACKGROUND_BRIDGE="${NEOHABITAT_SHOULD_BACKGROUND_BRIDGE:=true}"
SHOULD_ENABLE_DEBUGGER="${NEOHABITAT_SHOULD_ENABLE_DEBUGGER:=false}"
SHOULD_ENABLE_CRON="${NEOHABITAT_SHOULD_ENABLE_CRON:=true}"
SHOULD_RUN_BRIDGE="${NEOHABITAT_SHOULD_RUN_BRIDGE:=true}"
SHOULD_RUN_NEOHABITAT="${NEOHABITAT_SHOULD_RUN_NEOHABITAT:=true}"
SHOULD_RUN_PUSHSERVER="${NEOHABITAT_SHOULD_RUN_PUSHSERVER:=true}"
SHOULD_UPDATE_SCHEMA="${NEOHABITAT_SHOULD_UPDATE_SCHEMA:=false}"
PORT_RESV_TCP="${NEOHABITAT_PORT_RESV_TCP:=9000}"
#HABIPROXY_ELKO_HOST="${NEOHABITAT_HABIPROXY_ELKO_HOST:=neohabitat}"
#HABIPROXY_ELKO_PORT="${NEOHABITAT_HABIPROXY_ELKO_PORT:=9000}"

BASE_ARGS=(
  org.elkoserver.server.context.ContextServerBoot
  trace_cont=DEBUG
  trace_comm=EVENT
  # Forcibly logs to stdout to comply with 12 Factor App guidelines.
  tracelog_dir=/plz/log/to/stdout
  tracelog_tag=context
  conf.listen.host="${SERVER_HOST}:${PORT_RESV_TCP}"
  conf.listen.bind="${SERVER_BIND}:${PORT_RESV_TCP}"
  conf.listen.protocol=tcp
  conf.comm.jsonstrictness=true
  conf.context.entrytimeout=999999
  conf.context.odb=mongo
  conf.context.odb.mongo.hostport="${MONGO_HOST}"
  conf.context.objstore=org.elkoserver.objdb.store.mongostore.MongoObjectStore
  conf.context.name="${SERVER_NAME}"
  conf.context.shutdownpassword="${SHUTDOWN_PASSWORD}"
  conf.msgdiagnostics=true
)

JVM_ARGS=(
  -DDEBUG.MONGO=true
  -DDB.TRACE=true
)

function start_bridge() {
  cd ${GIT_BASE_DIR}/bridge && npm run supervisor-bridge-docker -- \
    -l ${BRIDGE_HOST}:${BRIDGE_PORT} \
    -e ${BRIDGE_ELKO_HOST} \
    -m ${MONGO_HOST}/elko \
    -c ${DEFAULT_CONTEXT} \
    -t debug 2>&1 | tee bridge.log
}

function start_pushserver() {
  if [[ "${NODE_ENV}" == "production" ]]; then
    (cd "${GIT_BASE_DIR}/pushserver" && npm run start 2>&1 | tee ../pushserver.log)
  else
    (cd "${GIT_BASE_DIR}/pushserver" && npm run debug 2>&1 | tee ../pushserver.log)
  fi
}

function start_elko_server() {
  mvn package
  java "${JVM_ARGS[@]}" \
    -jar ${GIT_BASE_DIR}/target/neohabitat-${VERSION}.jar \
    "${BASE_ARGS[@]}" \
    "${@}" 2>&1 | tee elko_server.log
}


if [ "${SHOULD_ENABLE_CRON}" == true ]; then
  echo " - Starting cron daemon..."
  crond -i
else
  echo "${SHOULD_ENABLE_CRON}"
  echo " - Skipping cron.."
fi

if [ "${SHOULD_ENABLE_DEBUGGER}" == true ]; then
  echo " - Enabling JMX debugging for Neohabitat..."
  JVM_ARGS+=(
    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${DEBUGGER_PORT}"
  )
fi

#Build/Rebuild the database if EITHER environment forces it OR the db doesn't exist yet.
if [ "${SHOULD_UPDATE_SCHEMA}" == true ]; then
  cd ${GIT_BASE_DIR}/${SCHEMA_DIR}
  retry 60 "make fast"
  cd ..
else
  if [ $(mongosh neohabitatmongo:27017 --eval 'db.getMongo().getDBNames().indexOf("elko")' --quiet) -ne "-1" ]; then
    cd ${GIT_BASE_DIR}/${SCHEMA_DIR}
    retry 60 "make fast"
    cd ..
  fi
fi

# Starts the Habitat-to-Elko bridge process if requested.
if [ "${SHOULD_RUN_BRIDGE}" == true ]; then
  if [ "${SHOULD_BACKGROUND_BRIDGE}" == true ]; then
    start_bridge &
  else
    start_bridge
  fi
fi

# Starts the Exhibit's HTML push server if requested.
if [ "${SHOULD_RUN_PUSHSERVER}" == true ]; then
  start_pushserver &
fi

# Starts the Habitat Elko server if requested.
if [ "${SHOULD_RUN_NEOHABITAT}" == true ]; then
  echo " - Running Neohabitat Elko server with args: ${BASE_ARGS[@]}"
  start_elko_server
fi
