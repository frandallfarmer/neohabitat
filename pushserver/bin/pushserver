#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pushserver:server');
var http = require('http');
var net = require('net');

var log = require('winston');

/**
 * Reads the application's configuration.
 */
var YAML = require('yamljs');
var config = YAML.load(process.env.PUSH_SERVER_CONFIG || './config.dev.yml');

/**
 * Normalizes a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for an HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Initiates a connection to Mongo then instantiates routes.
 */
var MongoURL = process.env.PUSH_SERVER_MONGO_URL || 'mongodb://neohabitatmongo';
var MongoDatabase = process.env.PUSH_SERVER_MONGO_DB || 'elko';

var mongoDb;

const MongoClient = require('mongodb').MongoClient;

const startPushserver = async () => {
  const client = await MongoClient.connect(MongoURL);
  mongoDb = client.db(MongoDatabase);

  log.info('Connected to MongoDB %s/%s', MongoURL, MongoDatabase);

  /**
   * Starts the Habitat proxy service.
   */
  var HabiproxyServer = require('../habiproxy/proxy');
  var habiproxy = new HabiproxyServer(
      mongoDb,
      process.env.HABIPROXY_LISTEN_HOST || '0.0.0.0',
      process.env.HABIPROXY_LISTEN_PORT || '2018',
      process.env.HABIPROXY_ELKO_HOST || 'neohabitat',
      process.env.HABIPROXY_ELKO_PORT || '9000');
  habiproxy.start();

  // Establishes the PushServer's web application.
  var APIRoutes = require('../routes/api');
  var DocsRoutes = require('../routes/docs');
  var EmulatorRoutes = require('../routes/emulator');
  var EventsRoutes = require('../routes/events');
  var IndexRoutes = require('../routes/index');

  const apiRoutes = new APIRoutes(habiproxy, config, mongoDb);
  const docsRoutes = new DocsRoutes(habiproxy, config, mongoDb);
  const emulatorRoutes = new EmulatorRoutes(habiproxy, config, mongoDb);
  const eventsRoutes = new EventsRoutes(habiproxy, config, mongoDb);
  const indexRoutes = new IndexRoutes(habiproxy, config, mongoDb);

  // Register application routes.
  app.use('/', indexRoutes.router);
  app.use('/api/v1', apiRoutes.router);
  app.use('/docs', docsRoutes.router);
  app.use('/emulator', emulatorRoutes.router);
  app.use('/events', eventsRoutes.router);

  // catch 404 and forward to error handler
  app.use(function(req, res, next) {
    var err = new Error(`Not Found ${req.path} ${req.url}`);
    err.status = 404;
    next(err);
  });

  // error handler
  app.use(function(err, req, res, next) {
    log.error('Error caught: %s', err)
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render('error');
  });

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '1701');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    log.debug('HTTP server listening on ' + bind);
  }

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
};


(async function main() {
  await startPushserver();
}());
